generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid(2))
  name             String
  birthdate        DateTime?
  email            String            @unique
  emailVerified    Boolean           @default(false)
  username         String            @unique
  image            String?
  language         String?           @default("en")
  role             String?
  isOnline         Boolean?          @default(false)
  lastActiveAt     DateTime?
  theme            WebsiteTheme      @default(SYSTEM)
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  accounts         Account[]
  passkeys         Passkey[]
  sessions         Session[]
  towersGamePlayer TowersGamePlayer?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Account {
  id                    String    @id @default(cuid(2))
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  idToken               String?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Passkey {
  id           String   @id @default(cuid(2))
  name         String?
  publicKey    String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Session {
  id             String   @id @default(cuid(2))
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Verification {
  id         String   @id @default(cuid(2))
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RateLimit {
  id          String   @id @default(cuid(2))
  key         String?
  count       Int?
  lastRequest Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum WebsiteTheme {
  SYSTEM
  LIGHT
  DARK
}
