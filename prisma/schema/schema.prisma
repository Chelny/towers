generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid(2))
  name                String
  birthdate           DateTime?
  email               String             @unique
  emailVerified       Boolean            @default(false)
  username            String             @unique
  image               String?
  language            String?            @default("en")
  role                String?
  isOnline            Boolean?           @default(false)
  lastActiveAt        DateTime?
  banned              Boolean?
  banReason           String?
  banExpires          DateTime?
  accounts            Account[]
  passkeys            Passkey[]
  sessions            Session[]
  friendshipsUser1    Friendship[]       @relation("FriendshipUser1")
  friendshipsUser2    Friendship[]       @relation("FriendshipUser2")
  directMessagesUser2 DirectMessage[]    @relation("DirectMessageReceiver")
  directMessagesUser1 DirectMessage[]    @relation("DirectMessageSender")
  towersUserProfile   TowersUserProfile?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Account {
  id                    String    @id @default(cuid(2))
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  idToken               String?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Passkey {
  id           String   @id @default(cuid(2))
  name         String?
  publicKey    String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Session {
  id             String   @id @default(cuid(2))
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Verification {
  id         String   @id @default(cuid(2))
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RateLimit {
  id          String   @id @default(cuid(2))
  key         String?
  count       Int?
  lastRequest Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Friendship {
  id        String           @id @default(cuid(2))
  userId1   String
  user1     User             @relation("FriendshipUser1", fields: [userId1], references: [id], onDelete: Cascade)
  userId2   String
  user2     User             @relation("FriendshipUser2", fields: [userId2], references: [id], onDelete: Cascade)
  status    FriendshipStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([userId1, userId2])
  @@index([userId1])
  @@index([userId2])
}

model DirectMessage {
  id         String   @id @default(cuid(2))
  senderId   String
  sender     User     @relation("DirectMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("DirectMessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([senderId, receiverId])
}

enum FriendshipStatus {
  NONE
  PENDING
  ACCEPTED
  BLOCKED
}

enum RoomLevel {
  SOCIAL
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum TableType {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum TableChatMessageType {
  CHAT
  USER_JOINED
  USER_LEFT
  TABLE_HOST
  TABLE_TYPE
  GAME_RATING
  CIPHER_KEY
  HERO_CODE
  HERO_MESSAGE
}
