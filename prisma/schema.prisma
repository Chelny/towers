// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(uuid())
  name                   String
  gender                 Gender?
  birthdate              DateTime?
  email                  String          @unique
  emailVerified          DateTime?
  username               String?         @unique
  password               String?
  image                  String?
  language               String          @default("en")
  isOnline               Boolean         @default(false)
  lastActiveAt           DateTime        @default(now())
  status                 UserStatus      @default(PENDING_EMAIL_VERIFICATION)
  bannedAt               DateTime?
  deletionScheduledAt    DateTime?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  accounts               Account[]
  sessions               Session[]
  towersGameUser         TowersGameUser?
  authenticators         Authenticator[]
  loginHistoryRecords    LoginHistory[]
  sentFriendRequests     Friendship[]    @relation("FriendshipsSent")
  receivedFriendRequests Friendship[]    @relation("FriendshipsReceived")
  sentDirectMessages     DirectMessage[] @relation("DirectMessagesSent")
  receivedDirectMessages DirectMessage[] @relation("DirectMessagesReceived")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String         @id @default(uuid())
  sessionToken        String         @unique
  userId              String
  expires             DateTime
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginHistoryRecords LoginHistory[]
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  email      String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String   @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model LoginHistory {
  id          String       @id @default(uuid())
  userId      String
  ipAddress   String
  userAgent   String
  location    String? // E.g., "Montreal, Quebec, Canada"
  loginMethod LoginMethod?
  sessionId   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     Session?     @relation(fields: [sessionId], references: [id])
}

model Friendship {
  id        String           @id @default(uuid())
  userId1   String
  userId2   String
  status    FriendshipStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user1     User             @relation("FriendshipsSent", fields: [userId1], references: [id], onDelete: Cascade)
  user2     User             @relation("FriendshipsReceived", fields: [userId2], references: [id], onDelete: Cascade)

  @@unique([userId1, userId2])
}

model TowersGameUser {
  id                String          @id @default(uuid())
  userId            String          @unique
  roomId            String?
  tableId           String?
  seatNumber        Int?
  rating            Int             @default(0)
  gamesCompleted    Int             @default(0)
  wins              Int             @default(0)
  loses             Int             @default(0)
  streak            Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  room              Room?           @relation(fields: [roomId], references: [id])
  roomChatMessages  RoomChat[]
  table             Table?          @relation(fields: [tableId], references: [id])
  tableSettings     TableSettings[]
  tableChatMessages TableChat[]
  hostedTables      Table[]         @relation("TableHost")
  bootedTables      TableBoot[]     @relation("TableBooted")
  bootedByTables    TableBoot[]     @relation("TableBootedBy")

  @@unique([userId, roomId])
  @@unique([userId, tableId])
  @@unique([tableId, seatNumber])
}

model Room {
  id              String           @id @default(uuid())
  name            String           @unique
  difficulty      RoomLevel        @default(SOCIAL)
  full            Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  towersGameUsers TowersGameUser[]
  chatMessages    RoomChat[]
  tables          Table[]
}

model RoomChat {
  id             String              @id @default(uuid())
  roomId         String
  towersUserId   String
  message        String
  type           RoomChatMessageType @default(CHAT)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  room           Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  towersGameUser TowersGameUser      @relation(fields: [towersUserId], references: [id])
}

model Table {
  id              String           @id @default(uuid())
  roomId          String
  tableNumber     Int
  hostId          String
  tableType       TableType        @default(PUBLIC)
  rated           Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  room            Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)
  host            TowersGameUser   @relation("TableHost", fields: [hostId], references: [id])
  towersGameUsers TowersGameUser[]
  chatMessages    TableChat[]
  bootedPlayers   TableBoot[]

  @@unique([roomId, tableNumber])
}

model TableSettings {
  id             String         @id @default(uuid())
  towersUserId   String
  sound          Boolean        @default(true)
  upKey          String         @default("ArrowUp")
  downKey        String         @default("ArrowDown")
  leftKey        String         @default("ArrowLeft")
  rightKey       String         @default("ArrowRight")
  spaceKey       String         @default("Space")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  towersGameUser TowersGameUser @relation(fields: [towersUserId], references: [id], onDelete: Cascade)
}

model TableChat {
  id                    String               @id @default(uuid())
  tableId               String
  towersUserId          String?
  message               String
  type                  TableChatMessageType @default(CHAT)
  visibleToTowersUserId String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  table                 Table                @relation(fields: [tableId], references: [id], onDelete: Cascade)
  towersGameUser        TowersGameUser?      @relation(fields: [towersUserId], references: [id])
}

model TableBoot {
  id                   String         @id @default(uuid())
  tableId              String
  towersUserId         String
  bootedByTowersUserId String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  table                Table          @relation(fields: [tableId], references: [id], onDelete: Cascade)
  bootedUser           TowersGameUser @relation("TableBooted", fields: [towersUserId], references: [id], onDelete: Cascade)
  bootedBy             TowersGameUser @relation("TableBootedBy", fields: [bootedByTowersUserId], references: [id], onDelete: Cascade)
}

model DirectMessage {
  id        String   @id @default(uuid())
  userId1   String
  userId2   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User1     User     @relation("DirectMessagesSent", fields: [userId1], references: [id])
  User2     User     @relation("DirectMessagesReceived", fields: [userId2], references: [id])
}

enum Gender {
  M
  F
  X
}

enum UserStatus {
  PENDING_EMAIL_VERIFICATION
  ACTIVE
  BANNED
  PENDING_DELETION
}

enum LoginMethod {
  CREDENTIALS
  GITHUB
  GOOGLE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum RoomLevel {
  SOCIAL
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RoomChatMessageType {
  CHAT
}

enum TableType {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum TableChatMessageType {
  CHAT
  USER_ACTION
  SCORE_UPDATE
  TABLE_HOST
  TABLE_TYPE
  CIPHER_KEY
  HERO_TEXT
}
