generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
  engineType      = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid())
  name                String
  birthdate           DateTime?
  email               String             @unique
  emailVerified       DateTime?
  pendingEmail        String?
  username            String?            @unique
  password            String?
  image               String?
  language            String             @default("en")
  isOnline            Boolean            @default(false)
  lastActiveAt        DateTime           @default(now())
  status              UserStatus         @default(PENDING_EMAIL_VERIFICATION)
  bannedAt            DateTime?
  deletionScheduledAt DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  accounts            Account[]
  authenticators      Authenticator[]
  directMessageUser2  DirectMessage[]    @relation("DirectMessageReceiver")
  directMessageUser1  DirectMessage[]    @relation("DirectMessageSender")
  friendshipUser1     Friendship[]       @relation("FriendshipUser1")
  friendshipUser2     Friendship[]       @relation("FriendshipUser2")
  loginHistoryRecords LoginHistory[]
  sessions            Session[]
  towersUserProfile   TowersUserProfile?
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String   @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model LoginHistory {
  id        String   @id @default(uuid())
  userId    String
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id        String           @id @default(uuid())
  userId1   String
  userId2   String
  status    FriendshipStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user1     User             @relation("FriendshipUser1", fields: [userId1], references: [id], onDelete: Cascade)
  user2     User             @relation("FriendshipUser2", fields: [userId2], references: [id], onDelete: Cascade)

  @@unique([userId1, userId2])
  @@index([userId1])
  @@index([userId2])
}

model DirectMessage {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("DirectMessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("DirectMessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId])
}

model TowersRoom {
  id             String                  @id @default(uuid())
  name           String                  @unique
  difficulty     RoomLevel               @default(SOCIAL)
  full           Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  chatMessages   TowersRoomChatMessage[]
  tables         TowersTable[]
  userRoomTables TowersUserRoomTable[]
}

model TowersRoomChatMessage {
  id            String            @id @default(uuid())
  roomId        String
  userProfileId String
  message       String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  room          TowersRoom        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userProfile   TowersUserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model TowersTable {
  id             String                   @id @default(uuid())
  roomId         String
  tableNumber    Int
  hostId         String
  tableType      TableType                @default(PUBLIC)
  rated          Boolean                  @default(true)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  host           TowersUserProfile        @relation("TableHost", fields: [hostId], references: [id])
  room           TowersRoom               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  bootedUsers    TowersTableBoot[]
  chatMessages   TowersTableChatMessage[]
  userRoomTables TowersUserRoomTable[]

  @@unique([roomId, tableNumber])
}

model TowersTableSettings {
  id            String            @id @default(uuid())
  userProfileId String
  upKey         String            @default("ArrowUp")
  downKey       String            @default("ArrowDown")
  leftKey       String            @default("ArrowLeft")
  rightKey      String            @default("ArrowRight")
  spaceKey      String            @default("Space")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  userProfile   TowersUserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model TowersTableChatMessage {
  id              String               @id @default(uuid())
  tableId         String
  userProfileId   String
  message         String
  type            TableChatMessageType @default(CHAT)
  privateToUserId String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  table           TowersTable          @relation(fields: [tableId], references: [id], onDelete: Cascade)
  userProfile     TowersUserProfile    @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model TowersTableBoot {
  id                          String            @id @default(uuid())
  tableId                     String
  userProfileId               String
  bootedByTowersUserProfileId String
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
  bootedBy                    TowersUserProfile @relation("TableBootedBy", fields: [bootedByTowersUserProfileId], references: [id], onDelete: Cascade)
  table                       TowersTable       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  bootedUser                  TowersUserProfile @relation("TableBootedUser", fields: [userProfileId], references: [id], onDelete: Cascade)
}

model TowersUserProfile {
  id                String                   @id @default(uuid())
  userId            String                   @unique
  rating            Int                      @default(0)
  gamesCompleted    Int                      @default(0)
  wins              Int                      @default(0)
  loses             Int                      @default(0)
  streak            Int                      @default(0)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  roomChatMessages  TowersRoomChatMessage[]
  hostedTables      TowersTable[]            @relation("TableHost")
  bootedByTables    TowersTableBoot[]        @relation("TableBootedBy")
  bootedTables      TowersTableBoot[]        @relation("TableBootedUser")
  tableChatMessages TowersTableChatMessage[]
  tableSettings     TowersTableSettings[]
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userRoomTables    TowersUserRoomTable[]
}

model TowersUserRoomTable {
  id            String            @id @default(uuid())
  userProfileId String
  roomId        String?
  tableId       String?
  seatNumber    Int?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  room          TowersRoom?       @relation(fields: [roomId], references: [id])
  table         TowersTable?      @relation(fields: [tableId], references: [id])
  userProfile   TowersUserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, roomId, tableId])
  @@unique([roomId, tableId, seatNumber])
}

enum UserStatus {
  PENDING_EMAIL_VERIFICATION
  ACTIVE
  BANNED
  PENDING_DELETION
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum RoomLevel {
  SOCIAL
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum TableType {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum TableChatMessageType {
  CHAT
  USER_ACTION
  TABLE_HOST
  TABLE_TYPE
  GAME_RATING
  CIPHER_KEY
  HERO_CODE
  HERO_MESSAGE
}
