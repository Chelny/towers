// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  name                String
  birthdate           DateTime?
  email               String     @unique
  emailVerified       DateTime?
  pendingEmail        String?
  username            String?    @unique
  password            String?
  image               String?
  language            String     @default("en")
  isOnline            Boolean    @default(false)
  lastActiveAt        DateTime   @default(now())
  status              UserStatus @default(PENDING_EMAIL_VERIFICATION)
  bannedAt            DateTime?
  deletionScheduledAt DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  accounts            Account[]
  sessions            Session[]
  authenticators      Authenticator[]
  loginHistoryRecords LoginHistory[]
  friendshipUser1     Friendship[]       @relation("FriendshipUser1")
  friendshipUser2     Friendship[]       @relation("FriendshipUser2")
  directMessageUser1  DirectMessage[]    @relation("DirectMessageSender")
  directMessageUser2  DirectMessage[]    @relation("DirectMessageReceiver")
  towersUserProfile   TowersUserProfile?
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginHistoryRecords LoginHistory[]
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String   @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model LoginHistory {
  id        String   @id @default(uuid())
  userId    String
  ipAddress String
  userAgent String
  location  String? // E.g., "Montreal, Quebec, Canada"
  sessionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id])
}

model Friendship {
  id        String           @id @default(uuid())
  userId1   String
  userId2   String
  status    FriendshipStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user1 User @relation("FriendshipUser1", fields: [userId1], references: [id], onDelete: Cascade)
  user2 User @relation("FriendshipUser2", fields: [userId2], references: [id], onDelete: Cascade)

  @@unique([userId1, userId2])
  @@index([userId1])
  @@index([userId2])
}

model DirectMessage {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("DirectMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("DirectMessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId])
}

model TowersRoom {
  id         String    @id @default(uuid())
  name       String    @unique
  difficulty RoomLevel @default(SOCIAL)
  full       Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  tables         TowersTable[]
  chatMessages   TowersRoomChatMessage[]
  userRoomTables TowersUserRoomTable[]
}

model TowersRoomChatMessage {
  id            String   @id @default(uuid())
  roomId        String
  userProfileId String
  message       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  room        TowersRoom        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userProfile TowersUserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model TowersTable {
  id          String    @id @default(uuid())
  roomId      String
  tableNumber Int
  hostId      String
  tableType   TableType @default(PUBLIC)
  rated       Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  room           TowersRoom               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  host           TowersUserProfile        @relation("TableHost", fields: [hostId], references: [id])
  chatMessages   TowersTableChatMessage[]
  bootedUsers    TowersTableBoot[]
  userRoomTables TowersUserRoomTable[]

  @@unique([roomId, tableNumber])
}

model TowersTableSettings {
  id            String   @id @default(uuid())
  userProfileId String
  upKey         String   @default("ArrowUp")
  downKey       String   @default("ArrowDown")
  leftKey       String   @default("ArrowLeft")
  rightKey      String   @default("ArrowRight")
  spaceKey      String   @default("Space")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userProfile TowersUserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model TowersTableChatMessage {
  id              String               @id @default(uuid())
  tableId         String
  userProfileId   String
  message         String
  type            TableChatMessageType @default(CHAT)
  privateToUserId String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  table       TowersTable       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  userProfile TowersUserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model TowersTableBoot {
  id                          String   @id @default(uuid())
  tableId                     String
  userProfileId               String
  bootedByTowersUserProfileId String
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  table      TowersTable       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  bootedUser TowersUserProfile @relation("TableBootedUser", fields: [userProfileId], references: [id], onDelete: Cascade)
  bootedBy   TowersUserProfile @relation("TableBootedBy", fields: [bootedByTowersUserProfileId], references: [id], onDelete: Cascade)
}

model TowersUserProfile {
  id             String   @id @default(uuid())
  userId         String   @unique
  rating         Int      @default(0)
  gamesCompleted Int      @default(0)
  wins           Int      @default(0)
  loses          Int      @default(0)
  streak         Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hostedTables      TowersTable[]            @relation("TableHost")
  tableSettings     TowersTableSettings[]
  roomChatMessages  TowersRoomChatMessage[]
  tableChatMessages TowersTableChatMessage[]
  bootedTables      TowersTableBoot[]        @relation("TableBootedUser")
  bootedByTables    TowersTableBoot[]        @relation("TableBootedBy")
  userRoomTables    TowersUserRoomTable[]
}

model TowersUserRoomTable {
  id            String   @id @default(uuid())
  userProfileId String
  roomId        String?
  tableId       String?
  seatNumber    Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userProfile TowersUserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  room        TowersRoom?       @relation(fields: [roomId], references: [id])
  table       TowersTable?      @relation(fields: [tableId], references: [id])

  @@unique([userProfileId, roomId, tableId])
  @@unique([roomId, tableId, seatNumber])
}

enum UserStatus {
  PENDING_EMAIL_VERIFICATION
  ACTIVE
  BANNED
  PENDING_DELETION
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum RoomLevel {
  SOCIAL
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum TableType {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum TableChatMessageType {
  CHAT
  USER_ACTION
  TABLE_HOST
  TABLE_TYPE
  GAME_RATING
  CIPHER_KEY
  HERO_CODE
  HERO_MESSAGE
}
